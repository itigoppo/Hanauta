http://noritan-micon.blog.so-net.ne.jp/2012-08-25
http://gori.me/mac/13353


とりあえずお作法。

root
└libs
	└hanauta←Hanauta
└test←プロジェクトディレクトリ

という想定ですすめます。
プロジェクトディレクトリは別にルート直にしても平気なはず。

=====
test/config.php
を開いてパスの設定。
素直に使うなら基本的には弄る必要ないです。

test/conf/load.ini
でHanautaで使うクラスの設定をしてあります。
TwitterとTumblrはオプション扱いということでコメントアウトしてあるんでつかうなら解除。
で、PEARを各種インストール。
pear install Net_URL2-***
pear install HTTP_Request2-***
pear install HTTP_OAuth-***
pear install http://svn.coderepos.org/share/lang/php/Jsphon/release/Jsphon-1.0.1.tgz

多分それぞれ最新でも大丈夫。

test/conf/fw.ini
で設定されているINI_DBがhanauta/confになければDB使わないようになります。
必要ならtest/conf/sample_db.iniを参考に作ってください。

以上基本設定項目終了。
=====

プロジェクト用独自クラス追加の方法。
test/config.php
で設定されているDIR_SYS内にファイル追加。
test/conf/sys.ini
で設定されているINI_EXTENDファイルに設定。
設定方法は「key="value"」
keyが呼び出しキー
valueがファイル名
$obj_ext["key"]->function()
で呼び出し。
例：
class test{}をtest.phpとして作ったら
test="test"

=====

あとは普通にコード書いてちゃんさん。

=====

各設定ファイルの説明。

test/conf/*.ini

:fw.ini|Hanauta設定。とくに弄らなくて平気。
:load.ini|Hanautaロード用設定。とくに弄らなくて平気。
:sys.ini|プロジェクト設定。とくに弄らなくて平気。プロジェクト用に定数化したいものあれば各自設定してください。
:db.ini|データベース設定。DB使わないなら削除。使うなら各値設定。
:extend.ini|プロジェクト用拡張クラスロード設定。必要都度追加。
:version.ini|プロジェクトバージョン設定。とくになくてもいいしあって設定したら定数になるよ的なあれ。

load.ini、extend.ini以外は定数設定です。
定数名 = "値";
で設定してください。

=====================================
基本リクエストクラス

$obj["request"]->hoge();

リクエストパラメーターはHanautaロードした時点で拾ってます。
そう$_GET["hoge"]系のあれ。

// SERVER
$_srvars["hoge"]
// SESSION
$_svars["hoge"]
// GET
$_gvars["hoge"]
// COOKIE
$_cvars["hoge"]
// POST
$_pvars["hoge"]
// FILES
$_fvars["hoge"]

$_gvarsだけはURLデコードした状態のを返します。
あとはそのまま。

他使い方。

セッションに保存する。
$obj["request"]->vars2ses("hoge",$hoge);
セッションをキー指定で削除。
配列にキー増やして複数削除。
$obj["request"]->del_ses($_svars,array("hoge"));
セッションオール削除
$obj["request"]->del_ses($_svars,array());

=====
基本文字列クラス

$obj["str_func"]->hoge();


=====
*decode_str(string $str[or array $array])

decode_str - 文字のデコードをする

** 説明

渡された文字列及び配列の各値をデコードして返す。

** パラメーター

:$str|変換する文字列or配列

** 返り値

変換後の文字列or配列を返します。


=====
*encode_str(string $str[or array $array])

encode_str - 文字のエンコードをする

** 説明

渡された文字列及び配列の各値をエンコードして返す。

** パラメーター

:$str|変換する文字列or配列

** 返り値

変換後の文字列or配列を返します。

=====
*convart_str(string $str[,int $uni=3])

convart_str - 改行コードを統一する

** 説明

渡された文字列の改行コードを統一して返す。

** パラメーター

:$str|変換する文字列
:$uni|統一改行コード、デフォルト：3（\r\n：1、\r：2、\n：3

** 返り値

変換後の文字列を返します。

=====
*convart_charset(string $str[or array $array],string $to[,string $from="auto"])

convart_charset - 文字コードを変換する

** 説明

渡された文字列及び配列の各値の文字コードを$fromから$toに変換して返す。

** パラメーター

:$str|変換する文字列or配列
:$to|変換後の文字コード
:$from|変換前の文字コード、デフォルト:auto

** 返り値

渡された文字列及び配列の各値の文字コードを変換して返す。


=====
*safe_getEncoding(string $str[,string $default="auto"])

safe_getEncoding - 文字コードを確認する

** 説明

渡された文字列の文字コードを返す。

** パラメーター

:$str|確認する文字列
:$default|どれにも当てはまらなかった場合の返り値

** 返り値

変換後の文字列を返します。

=====
*decode_url(string $str[or array $array])

decode_url - URLデコードする

** 説明

渡された文字列及び配列の各値をURLデコードして返す。

** パラメーター

:$str|変換する文字列or配列

** 返り値

変換後の文字列を返します。

=====
*encode_url(string $str[or array $array])

encode_url - URLエンコードする

** 説明

渡された文字列及び配列の各値をURLエンコードして返す。

** パラメーター

:$str|変換する文字列or配列

** 返り値

変換後の文字列を返します。

=====
*replace_text(string $str)

replace_text - 機種依存文字を置き換える

** 説明

渡された文字列内に含まれる機種依存文字を置き換える。

** パラメーター

:$str|変換する文字列

** 返り値

変換後の文字列を返します。


=====
*cut_str(string $str,int $length[,string $mark=NULL])

cut_str - 文字列を指定数でカットする

** 説明

渡された文字列を指定文字数でカットする。

** パラメーター

:$str|変換する文字列
:$length|制限文字数
:$mark|省略を表すマーク

** 返り値

カット後の文字列に省略マークをつけたものを返します。


=====
*auto_link(string $url[,string $str=NULL])

auto_link - 自動リンク化する

** 説明

渡された文字列内に含まれるURLにリンクタグをつける。

** パラメーター

:$url|URL変換する文字列
:$str|URLの置き換え文字列、記載なしの場合URLのまま

** 返り値

変換後の文字列を返します。


=====
*user_id(string $mail,string $ip,string $salt)

user_id - ユーザー識別IDを発行する

** 説明

IPアドレスを元にユーザー識別IDを発行する。
メールアドレスが指定されている時は発行しない。

** パラメーター

:$mail|メールアドレス
:$ip|IPアドレス
:$salt|暗号化のベース文字列(2文字)

** 返り値

識別ID。
メールアドレス指定時は「???」


